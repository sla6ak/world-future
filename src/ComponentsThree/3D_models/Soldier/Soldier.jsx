/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.3 Soldier.glb
*/

import React, { Suspense, useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
// import { SkeletonHelperProps } from '@reacrt-three/fiber';
// import * as THREE from 'three';
import { useSphere } from '@react-three/cannon'
import { useFrame } from '@react-three/fiber'
// import { Vector3 } from 'three'
import { useDispatch, useSelector } from 'react-redux'
import {
  newOpenCanvasModal,
  onHoverCanvasModal,
  ofHoverCanvasModal
} from 'Redux/Slises/openCanvasModalSlise'

export function SoldierModel({ nikName, planet }) {
  const playerInfo = useSelector((state) => state[planet].players[nikName])
  const dispatch = useDispatch()
  const [hovered, setHover] = useState(false)
  const [active, setActive] = useState(false)
  const [lastPosition, setLastPosition] = useState(playerInfo.position)
  const [curentAnimation, setCurentAnimation] = useState('state')
  const group = useRef()
  const positionHero = useSelector((state) => state.myPosition.position)

  const { nodes, materials, animations } = useGLTF(
    '/models/soldier/Soldier.glb'
  )
  const [refSphera, apiSphera] = useSphere(() => ({
    type: 'Dynamic',
    matrixAutoUpdate: true,
    mass: 1,
    position: [2, -2, 5]
  }))
  const { actions, names } = useAnimations(animations, group)

  useEffect(() => {
    if (curentAnimation === 'state') actions[names[0]].reset().fadeIn().play()
    if (curentAnimation === 'go') actions[names[1]].reset().fadeIn().play()
    if (curentAnimation === 'go-go') actions[names[2]].reset().fadeIn().play()
  }, [actions, curentAnimation, names])

  useFrame(() => {
    apiSphera.position.copy(playerInfo.position)
    apiSphera.rotation.copy(playerInfo.rotation)

    // console.log(lastPosition.x, playerInfo.position.x)
    // console.log(lastPosition.z, playerInfo.position.z)
    if (
      lastPosition.x === playerInfo.position.x ||
      lastPosition.z === playerInfo.position.z
    ) {
      setCurentAnimation('state')
      return
    }
    setCurentAnimation('go')
    setLastPosition({
      x: playerInfo.position.x,
      y: playerInfo.position.y,
      z: playerInfo.position.z
    })
  })

  useEffect(() => {
    const unsubscribeHero = apiSphera.position.subscribe((v) => {
      group.current.position.copy({
        x: v[0],
        y: v[1] - 1,
        z: v[2]
      })
      return unsubscribeHero
    })
  }, [apiSphera.position])

  useEffect(() => {
    const unsubscribeHero = apiSphera.rotation.subscribe((v) => {
      group.current.rotation.y = v[1]
      group.current.rotation.x = v[0]
      group.current.rotation.z = v[2]
      return unsubscribeHero
    })
  }, [apiSphera.rotation])

  const onClickObj = () => {
    const distance = group.current.position.distanceTo(positionHero)
    dispatch(
      newOpenCanvasModal({
        isClick: true,
        isHover: false,
        typeObject: 'hero',
        nikName,
        ObjPosition: {},
        distance,
        timerOpen: 5000
      })
    )
    setActive(!active)
  }
  const onHoverObj = () => {
    const distance = group.current.position.distanceTo(positionHero)
    setHover(true)
    dispatch(
      onHoverCanvasModal({
        isClick: false,
        isHover: true,
        nikName,
        typeObject: 'hero',
        ObjPosition: {},
        distance
      })
    )
    setActive(!active)
  }
  const offHoverObj = () => {
    setHover(false)
    dispatch(
      ofHoverCanvasModal({
        isClick: false,
        isHover: false,
        ObjPosition: {},
        info: {
          title: `${playerInfo.nikName}`,
          shortInfo: `Человек рожденный на планете ${playerInfo.rassa}`
        }
      })
    )
    setActive(!active)
  }

  return (
    <Suspense>
      <mesh ref={refSphera}>
        <meshStandardMaterial />
      </mesh>
      <group
        scale={hovered ? 0.7 : 0.65}
        onPointerDown={(e) => {
          onClickObj()
        }}
        onPointerEnter={(e) => {
          onHoverObj()
        }}
        onPointerOut={(e) => {
          offHoverObj()
        }}
        ref={group}
        dispose={null}
      >
        <group name="Scene">
          <group rotation={[-Math.PI / 2, 0, 0]} name="Character" scale={0.01}>
            <primitive object={nodes.mixamorigHips} />
            <skinnedMesh
              name="vanguard_Mesh"
              geometry={nodes.vanguard_Mesh.geometry}
              material={materials.VanguardBodyMat}
              skeleton={nodes.vanguard_Mesh.skeleton}
            />
            <skinnedMesh
              name="vanguard_visor"
              geometry={nodes.vanguard_visor.geometry}
              material={materials.Vanguard_VisorMat}
              skeleton={nodes.vanguard_visor.skeleton}
            />
          </group>
        </group>
      </group>
    </Suspense>
  )
}

useGLTF.preload('/models/soldier/Soldier.glb')
