/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.3 Soldier.glb
*/

import React, { Suspense, useEffect, useRef, useState } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
// import { SkeletonHelperProps } from '@reacrt-three/fiber';
// import * as THREE from 'three';
import { useSphere } from '@react-three/cannon';
import { useFrame } from '@react-three/fiber';
import { Vector3 } from 'three';
import { useLordKeyboardControls } from 'Hooks/useLordKeyboardControls';

export function SoldierModel({ playerInfo }) {
  const [curentPosition, setCurentPosition] = useState({
    x: playerInfo.position.x,
    y: playerInfo.position.y,
    z: playerInfo.position.z,
  });
  const [curentAnimation, setCurentAnimation] = useState({});
  const velocity = useRef([0, 0, 0]);
  const group = useRef();

  const { nodes, materials, animations } = useGLTF(
    '/models/soldier/Soldier.glb'
  );
  const [refSphera, apiSphera] = useSphere(() => ({
    type: 'Dynamic',
    matrixAutoUpdate: true,
    mass: 1,
    position: [2, -2, 5],
  }));
  const { actions, names } = useAnimations(animations, group);

  useEffect(() => {
    actions[names[0]].reset().fadeIn().play();
  }, [actions, names]);

  useFrame(() => {
    const direction = new Vector3();
    const frontVector = new Vector3(
      0,
      0,
      curentPosition.z - playerInfo.position.z
    );
    const sideVector = new Vector3(
      playerInfo.position.x - curentPosition.x,
      0,
      0
    );
    setCurentPosition({
      x: playerInfo.position.x,
      y: playerInfo.position.y,
      z: playerInfo.position.z,
    });
    direction.subVectors(frontVector, sideVector).normalize().multiplyScalar(3);
    // .applyEuler(group.current.rotation);
    apiSphera.velocity.set(direction.x, velocity.current[1], direction.z);

    apiSphera.velocity.set(direction.x, velocity.current[1], direction.z);
    // if (
    //   curentPosition.x > playerInfo.position.z &&
    //   Math.abs(velocity.current[1].toFixed(2)) < 0.05
    // ) {
    //   return apiSphera.velocity.set(
    //     velocity.current[0],
    //     -8,
    //     velocity.current[2]
    //   );
    // }
    // if (
    //   curentPosition.x < playerInfo.position.z &&
    //   Math.abs(velocity.current[1].toFixed(2)) < 0.05
    // ) {
    //   apiSphera.velocity.set(velocity.current[0], 8, velocity.current[2]);
    // }
  });

  useEffect(() => {
    const unsubscribeHero = apiSphera.velocity.subscribe(
      v => (velocity.current = v)
    );
    return unsubscribeHero;
  }, [apiSphera.velocity]);

  useEffect(() => {
    const unsubscribeCamera = apiSphera.position.subscribe(v => {
      group.current.position.copy({
        x: v[0],
        y: v[1] - 1,
        z: v[2],
      });
      return unsubscribeCamera;
    });
  }, [apiSphera.position]);

  return (
    <Suspense>
      <mesh ref={refSphera} scale={0.7}>
        {/* <sphereGeometry args={[1, 10, 10]} /> */}

        {/* <meshPhysicalMaterial color="black" /> */}
        <meshStandardMaterial />
      </mesh>
      <group ref={group} rotation={[-Math.PI / 2, 0, 0]} dispose={null}>
        <group name="Scene">
          <group name="Character" scale={0.01}>
            <primitive object={nodes.mixamorigHips} />
            <skinnedMesh
              name="vanguard_Mesh"
              geometry={nodes.vanguard_Mesh.geometry}
              material={materials.VanguardBodyMat}
              skeleton={nodes.vanguard_Mesh.skeleton}
            />
            <skinnedMesh
              name="vanguard_visor"
              geometry={nodes.vanguard_visor.geometry}
              material={materials.Vanguard_VisorMat}
              skeleton={nodes.vanguard_visor.skeleton}
            />
          </group>
        </group>
      </group>
    </Suspense>
  );
}

useGLTF.preload('/models/soldier/Soldier.glb');
